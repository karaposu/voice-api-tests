# coding: utf-8

"""
    PowerManifest Journal API

    API for managing personal journal entries in the PowerManifest life coaching app

    The version of the OpenAPI document: 1.0.0
    Contact: api@powermanifest.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from models.journal.mood_type import MoodType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CreateJournalEntryRequest(BaseModel):
    """
    CreateJournalEntryRequest
    """ # noqa: E501
    content: Annotated[str, Field(strict=True, max_length=10000)] = Field(description="The journal entry text content")
    mood: Optional[MoodType] = None
    entry_type: Optional[StrictStr] = Field(default='text', description="How the entry was created")
    voice_note_url: Optional[StrictStr] = Field(default=None, description="URL to original voice recording (if applicable)")
    tags: Optional[Annotated[List[StrictStr], Field(max_length=10)]] = Field(default=None, description="User-defined tags for categorization")
    is_private: Optional[StrictBool] = Field(default=True, description="Whether entry should be excluded from AI coaching context")
    __properties: ClassVar[List[str]] = ["content", "mood", "entry_type", "voice_note_url", "tags", "is_private"]

    @field_validator('entry_type')
    def entry_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('text', 'voice_transcript', 'quick_checkin',):
            raise ValueError("must be one of enum values ('text', 'voice_transcript', 'quick_checkin')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateJournalEntryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if voice_note_url (nullable) is None
        # and model_fields_set contains the field
        if self.voice_note_url is None and "voice_note_url" in self.model_fields_set:
            _dict['voice_note_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateJournalEntryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content"),
            "mood": obj.get("mood"),
            "entry_type": obj.get("entry_type") if obj.get("entry_type") is not None else 'text',
            "voice_note_url": obj.get("voice_note_url"),
            "tags": obj.get("tags"),
            "is_private": obj.get("is_private") if obj.get("is_private") is not None else True
        })
        return _obj


