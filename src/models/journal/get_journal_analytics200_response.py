# coding: utf-8

"""
    PowerManifest Journal API

    API for managing personal journal entries in the PowerManifest life coaching app

    The version of the OpenAPI document: 1.0.0
    Contact: api@powermanifest.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from models.journal.get_journal_analytics200_response_ai_insights import GetJournalAnalytics200ResponseAiInsights
from models.journal.get_journal_analytics200_response_mood_analysis import GetJournalAnalytics200ResponseMoodAnalysis
from models.journal.get_journal_analytics200_response_statistics import GetJournalAnalytics200ResponseStatistics
from models.journal.get_journal_analytics200_response_themes_analysis import GetJournalAnalytics200ResponseThemesAnalysis
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetJournalAnalytics200Response(BaseModel):
    """
    GetJournalAnalytics200Response
    """ # noqa: E501
    statistics: Optional[GetJournalAnalytics200ResponseStatistics] = None
    mood_analysis: Optional[GetJournalAnalytics200ResponseMoodAnalysis] = None
    themes_analysis: Optional[GetJournalAnalytics200ResponseThemesAnalysis] = None
    ai_insights: Optional[GetJournalAnalytics200ResponseAiInsights] = None
    __properties: ClassVar[List[str]] = ["statistics", "mood_analysis", "themes_analysis", "ai_insights"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetJournalAnalytics200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of statistics
        if self.statistics:
            _dict['statistics'] = self.statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mood_analysis
        if self.mood_analysis:
            _dict['mood_analysis'] = self.mood_analysis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of themes_analysis
        if self.themes_analysis:
            _dict['themes_analysis'] = self.themes_analysis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ai_insights
        if self.ai_insights:
            _dict['ai_insights'] = self.ai_insights.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetJournalAnalytics200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "statistics": GetJournalAnalytics200ResponseStatistics.from_dict(obj.get("statistics")) if obj.get("statistics") is not None else None,
            "mood_analysis": GetJournalAnalytics200ResponseMoodAnalysis.from_dict(obj.get("mood_analysis")) if obj.get("mood_analysis") is not None else None,
            "themes_analysis": GetJournalAnalytics200ResponseThemesAnalysis.from_dict(obj.get("themes_analysis")) if obj.get("themes_analysis") is not None else None,
            "ai_insights": GetJournalAnalytics200ResponseAiInsights.from_dict(obj.get("ai_insights")) if obj.get("ai_insights") is not None else None
        })
        return _obj


