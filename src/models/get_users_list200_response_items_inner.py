# coding: utf-8

"""
    AI Life Coach API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetUsersList200ResponseItemsInner(BaseModel):
    """
    GetUsersList200ResponseItemsInner
    """ # noqa: E501
    user_id: Optional[StrictInt] = None
    user_email: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    attributes: Optional[Dict[str, Any]] = Field(default=None, description="A JSON object representing user attributes or metadata.")
    signup_date: Optional[datetime] = None
    last_activity_date: Optional[datetime] = None
    number_of_files: Optional[StrictInt] = None
    list_of_file_ids: Optional[List[StrictInt]] = None
    number_of_records: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["user_id", "user_email", "country", "attributes", "signup_date", "last_activity_date", "number_of_files", "list_of_file_ids", "number_of_records"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetUsersList200ResponseItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetUsersList200ResponseItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_id": obj.get("user_id"),
            "user_email": obj.get("user_email"),
            "country": obj.get("country"),
            "attributes": obj.get("attributes"),
            "signup_date": obj.get("signup_date"),
            "last_activity_date": obj.get("last_activity_date"),
            "number_of_files": obj.get("number_of_files"),
            "list_of_file_ids": obj.get("list_of_file_ids"),
            "number_of_records": obj.get("number_of_records")
        })
        return _obj


