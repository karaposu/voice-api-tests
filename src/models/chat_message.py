# coding: utf-8

"""
    Chat Backend API

    REST chat API â€” create chats, post/poll messages, adjust per-chat settings, and retrieve usage statistics. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ChatMessage(BaseModel):
    """
    ChatMessage
    """ # noqa: E501
    message_id: Optional[StrictInt] = None
    chat_id: Optional[StrictInt] = None
    user_id: Optional[StrictInt] = None
    user_name: Optional[StrictStr] = None
    user_type: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    message_format: Optional[StrictStr] = None
    message_transcription: Optional[StrictStr] = None
    timestamp: Optional[datetime] = None
    logs: Optional[Dict[str, Any]] = Field(default=None, description="Internal or debugging logs")
    total_cost: Optional[Union[StrictFloat, StrictInt]] = None
    voice_feature_cost: Optional[Union[StrictFloat, StrictInt]] = None
    voice_usage_duration: Optional[Union[StrictFloat, StrictInt]] = None
    step_context: Optional[Dict[str, Any]] = None
    diff_of_step_context: Optional[StrictStr] = Field(default=None, description="shows how step context changed from previous messages")
    extracted_user_data: Optional[Dict[str, Any]] = None
    used_user_data: Optional[Dict[str, Any]] = None
    message_owner_emotional_state: Optional[StrictStr] = None
    message_owner_mini_goal: Optional[StrictStr] = None
    message_owner_medium_goal: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["message_id", "chat_id", "user_id", "user_name", "user_type", "message", "message_format", "message_transcription", "timestamp", "logs", "total_cost", "voice_feature_cost", "voice_usage_duration", "step_context", "diff_of_step_context", "extracted_user_data", "used_user_data", "message_owner_emotional_state", "message_owner_mini_goal", "message_owner_medium_goal"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ChatMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ChatMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message_id": obj.get("message_id"),
            "chat_id": obj.get("chat_id"),
            "user_id": obj.get("user_id"),
            "user_name": obj.get("user_name"),
            "user_type": obj.get("user_type"),
            "message": obj.get("message"),
            "message_format": obj.get("message_format"),
            "message_transcription": obj.get("message_transcription"),
            "timestamp": obj.get("timestamp"),
            "logs": obj.get("logs"),
            "total_cost": obj.get("total_cost"),
            "voice_feature_cost": obj.get("voice_feature_cost"),
            "voice_usage_duration": obj.get("voice_usage_duration"),
            "step_context": obj.get("step_context"),
            "diff_of_step_context": obj.get("diff_of_step_context"),
            "extracted_user_data": obj.get("extracted_user_data"),
            "used_user_data": obj.get("used_user_data"),
            "message_owner_emotional_state": obj.get("message_owner_emotional_state"),
            "message_owner_mini_goal": obj.get("message_owner_mini_goal"),
            "message_owner_medium_goal": obj.get("message_owner_medium_goal")
        })
        return _obj


