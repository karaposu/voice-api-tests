# coding: utf-8

"""
    AI Life Coach API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from models.chat_context_notes import ChatContextNotes
from models.coach_context import CoachContext
from models.user_data import UserData
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ChatHistoryMessage(BaseModel):
    """
    ChatHistoryMessage
    """ # noqa: E501
    user_id: StrictInt
    user_name: Optional[StrictStr] = None
    user_type: Optional[StrictStr] = None
    id: StrictInt
    message: StrictStr
    message_type: Optional[StrictStr] = None
    timestamp: datetime
    user_data: Optional[UserData] = Field(default=None, alias="userData")
    chat_context_notes: Optional[ChatContextNotes] = Field(default=None, alias="chatContextNotes")
    coach_context: Optional[CoachContext] = Field(default=None, alias="coachContext")
    __properties: ClassVar[List[str]] = ["user_id", "user_name", "user_type", "id", "message", "message_type", "timestamp", "userData", "chatContextNotes", "coachContext"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ChatHistoryMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user_data
        if self.user_data:
            _dict['userData'] = self.user_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of chat_context_notes
        if self.chat_context_notes:
            _dict['chatContextNotes'] = self.chat_context_notes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of coach_context
        if self.coach_context:
            _dict['coachContext'] = self.coach_context.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ChatHistoryMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_id": obj.get("user_id"),
            "user_name": obj.get("user_name"),
            "user_type": obj.get("user_type"),
            "id": obj.get("id"),
            "message": obj.get("message"),
            "message_type": obj.get("message_type"),
            "timestamp": obj.get("timestamp"),
            "userData": UserData.from_dict(obj.get("userData")) if obj.get("userData") is not None else None,
            "chatContextNotes": ChatContextNotes.from_dict(obj.get("chatContextNotes")) if obj.get("chatContextNotes") is not None else None,
            "coachContext": CoachContext.from_dict(obj.get("coachContext")) if obj.get("coachContext") is not None else None
        })
        return _obj


