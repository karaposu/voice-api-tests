# coding: utf-8

"""
    PowerManifest Affirmations API

    API for managing personalized affirmations in the PowerManifest life coaching app

    The version of the OpenAPI document: 1.0.0
    Contact: api@powermanifest.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from models.affirmation.affirmation_category import AffirmationCategory
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AiCreateAffirmationsRequest(BaseModel):
    """
    AiCreateAffirmationsRequest
    """ # noqa: E501
    context_corpus: StrictStr = Field(description="User's context data (goals, blocks, journal entries, etc.)")
    affirmation_category: Optional[AffirmationCategory] = None
    amount: Optional[Annotated[int, Field(le=20, strict=True, ge=1)]] = Field(default=5, description="Number of affirmations to generate")
    style: StrictStr = Field(description="Communication style preference")
    uslub: StrictStr = Field(description="Tone and approach style")
    __properties: ClassVar[List[str]] = ["context_corpus", "affirmation_category", "amount", "style", "uslub"]

    @field_validator('style')
    def style_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('spiritual', 'scientific', 'balanced', 'motivational',):
            raise ValueError("must be one of enum values ('spiritual', 'scientific', 'balanced', 'motivational')")
        return value

    @field_validator('uslub')
    def uslub_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('gentle', 'powerful', 'encouraging', 'direct', 'nurturing',):
            raise ValueError("must be one of enum values ('gentle', 'powerful', 'encouraging', 'direct', 'nurturing')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AiCreateAffirmationsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AiCreateAffirmationsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context_corpus": obj.get("context_corpus"),
            "affirmation_category": obj.get("affirmation_category"),
            "amount": obj.get("amount") if obj.get("amount") is not None else 5,
            "style": obj.get("style"),
            "uslub": obj.get("uslub")
        })
        return _obj


