# coding: utf-8

"""
    PowerManifest Affirmations API

    API for managing personalized affirmations in the PowerManifest life coaching app

    The version of the OpenAPI document: 1.0.0
    Contact: api@powermanifest.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from models.affirmation.affirmation_category import AffirmationCategory
from models.affirmation.schedule_config import ScheduleConfig
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Affirmation(BaseModel):
    """
    Affirmation
    """ # noqa: E501
    affirmation_id: Optional[StrictStr] = None
    text: Optional[StrictStr] = None
    category: Optional[AffirmationCategory] = None
    source: Optional[StrictStr] = None
    playing_voice: Optional[StrictStr] = None
    is_scheduled: Optional[StrictBool] = None
    schedule_config: Optional[ScheduleConfig] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["affirmation_id", "text", "category", "source", "playing_voice", "is_scheduled", "schedule_config", "created_at", "updated_at"]

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('user_created', 'ai_generated',):
            raise ValueError("must be one of enum values ('user_created', 'ai_generated')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Affirmation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of schedule_config
        if self.schedule_config:
            _dict['schedule_config'] = self.schedule_config.to_dict()
        # set to None if playing_voice (nullable) is None
        # and model_fields_set contains the field
        if self.playing_voice is None and "playing_voice" in self.model_fields_set:
            _dict['playing_voice'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Affirmation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affirmation_id": obj.get("affirmation_id"),
            "text": obj.get("text"),
            "category": obj.get("category"),
            "source": obj.get("source"),
            "playing_voice": obj.get("playing_voice"),
            "is_scheduled": obj.get("is_scheduled"),
            "schedule_config": ScheduleConfig.from_dict(obj.get("schedule_config")) if obj.get("schedule_config") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


