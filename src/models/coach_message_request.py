# coding: utf-8

"""
    AI Life Coach API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CoachMessageRequest(BaseModel):
    """
    CoachMessageRequest
    """ # noqa: E501
    message: Optional[StrictStr] = None
    mode: Optional[StrictStr] = None
    isolate_from_context: Optional[StrictBool] = None
    name_of_model: Optional[StrictStr] = None
    pick_model_for_chat_context: Optional[StrictStr] = None
    pick_model_for_coach_calculation: Optional[StrictStr] = None
    pick_model_for_coach_response: Optional[StrictStr] = None
    pick_model_for_message_type_checker: Optional[StrictStr] = None
    history_range_for_context: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["message", "mode", "isolate_from_context", "name_of_model", "pick_model_for_chat_context", "pick_model_for_coach_calculation", "pick_model_for_coach_response", "pick_model_for_message_type_checker", "history_range_for_context"]

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('text', 'voice',):
            raise ValueError("must be one of enum values ('text', 'voice')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CoachMessageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CoachMessageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message": obj.get("message"),
            "mode": obj.get("mode"),
            "isolate_from_context": obj.get("isolate_from_context"),
            "name_of_model": obj.get("name_of_model"),
            "pick_model_for_chat_context": obj.get("pick_model_for_chat_context"),
            "pick_model_for_coach_calculation": obj.get("pick_model_for_coach_calculation"),
            "pick_model_for_coach_response": obj.get("pick_model_for_coach_response"),
            "pick_model_for_message_type_checker": obj.get("pick_model_for_message_type_checker"),
            "history_range_for_context": obj.get("history_range_for_context")
        })
        return _obj


