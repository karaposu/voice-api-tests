# coding: utf-8

"""
    Chat Backend API

    REST chat API â€” create chats, post/poll messages, adjust per-chat settings, and retrieve usage statistics. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from models.chat_message import ChatMessage
from models.usage_metrics import UsageMetrics
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ChatFull(BaseModel):
    """
    ChatFull
    """ # noqa: E501
    chat_id: Optional[StrictInt] = None
    created_at: Optional[datetime] = None
    settings: Optional[Dict[str, Any]] = Field(default=None, description="Arbitrary key-value pairs (e.g., system_prompt, default_model)")
    messages: Optional[List[ChatMessage]] = None
    usage: Optional[UsageMetrics] = None
    __properties: ClassVar[List[str]] = ["chat_id", "created_at", "settings", "messages", "usage"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ChatFull from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item in self.messages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ChatFull from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chat_id": obj.get("chat_id"),
            "created_at": obj.get("created_at"),
            "settings": obj.get("settings"),
            "messages": [ChatMessage.from_dict(_item) for _item in obj.get("messages")] if obj.get("messages") is not None else None,
            "usage": UsageMetrics.from_dict(obj.get("usage")) if obj.get("usage") is not None else None
        })
        return _obj


